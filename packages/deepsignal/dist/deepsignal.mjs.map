{"version":3,"file":"deepsignal.mjs","sources":["../core/src/index.ts","../src/index.ts"],"sourcesContent":["import { computed, signal, Signal } from \"@preact/signals-core\";\n\nconst proxyToSignals = new WeakMap();\nconst objToProxy = new WeakMap();\nconst arrayToArrayOfSignals = new WeakMap();\nconst proxies = new WeakSet();\nconst objToIterable = new WeakMap();\nconst rg = /^\\$/;\nlet peeking = false;\n\nexport const deepSignal = <T extends object>(obj: T): DeepSignal<T> => {\n\tif (!shouldProxy(obj)) throw new Error(\"This object can't be observed.\");\n\tif (!objToProxy.has(obj))\n\t\tobjToProxy.set(obj, createProxy(obj, objectHandlers) as DeepSignal<T>);\n\treturn objToProxy.get(obj);\n};\n\nexport const peek = <\n\tT extends DeepSignalObject<object>,\n\tK extends keyof RevertDeepSignalObject<T>\n>(\n\tobj: T,\n\tkey: K\n): RevertDeepSignal<RevertDeepSignalObject<T>[K]> => {\n\tpeeking = true;\n\tconst value = obj[key];\n\tpeeking = false;\n\treturn value as RevertDeepSignal<RevertDeepSignalObject<T>[K]>;\n};\n\nconst createProxy = (target: object, handlers: ProxyHandler<object>) => {\n\tconst proxy = new Proxy(target, handlers);\n\tproxies.add(proxy);\n\treturn proxy;\n};\n\nconst throwOnMutation = () => {\n\tthrow new Error(\"Don't mutate the signals directly.\");\n};\n\nconst get =\n\t(isArrayOfSignals: boolean) =>\n\t(target: object, fullKey: string, receiver: object): unknown => {\n\t\tif (peeking) return Reflect.get(target, fullKey, receiver);\n\t\tlet returnSignal = isArrayOfSignals || fullKey[0] === \"$\";\n\t\tif (!isArrayOfSignals && returnSignal && Array.isArray(target)) {\n\t\t\tif (fullKey === \"$\") {\n\t\t\t\tif (!arrayToArrayOfSignals.has(target))\n\t\t\t\t\tarrayToArrayOfSignals.set(target, createProxy(target, arrayHandlers));\n\t\t\t\treturn arrayToArrayOfSignals.get(target);\n\t\t\t}\n\t\t\treturnSignal = fullKey === \"$length\";\n\t\t}\n\t\tif (!proxyToSignals.has(receiver)) proxyToSignals.set(receiver, new Map());\n\t\tconst signals = proxyToSignals.get(receiver);\n\t\tconst key = returnSignal ? fullKey.replace(rg, \"\") : fullKey;\n\t\tif (\n\t\t\t!signals.has(key) &&\n\t\t\ttypeof Object.getOwnPropertyDescriptor(target, key)?.get === \"function\"\n\t\t) {\n\t\t\tsignals.set(\n\t\t\t\tkey,\n\t\t\t\tcomputed(() => Reflect.get(target, key, receiver))\n\t\t\t);\n\t\t} else {\n\t\t\tlet value = Reflect.get(target, key, receiver);\n\t\t\tif (returnSignal && typeof value === \"function\") return;\n\t\t\tif (typeof key === \"symbol\" && wellKnownSymbols.has(key)) return value;\n\t\t\tif (!signals.has(key)) {\n\t\t\t\tif (shouldProxy(value)) {\n\t\t\t\t\tif (!objToProxy.has(value))\n\t\t\t\t\t\tobjToProxy.set(value, createProxy(value, objectHandlers));\n\t\t\t\t\tvalue = objToProxy.get(value);\n\t\t\t\t}\n\t\t\t\tsignals.set(key, signal(value));\n\t\t\t}\n\t\t}\n\t\treturn returnSignal ? signals.get(key) : signals.get(key).value;\n\t};\n\nconst objectHandlers = {\n\tget: get(false),\n\tset(target: object, fullKey: string, val: any, receiver: object): boolean {\n\t\tif (!proxyToSignals.has(receiver)) proxyToSignals.set(receiver, new Map());\n\t\tconst signals = proxyToSignals.get(receiver);\n\t\tif (fullKey[0] === \"$\") {\n\t\t\tif (!(val instanceof Signal)) throwOnMutation();\n\t\t\tconst key = fullKey.replace(rg, \"\");\n\t\t\tsignals.set(key, val);\n\t\t\treturn Reflect.set(target, key, val.peek(), receiver);\n\t\t} else {\n\t\t\tlet internal = val;\n\t\t\tif (shouldProxy(val)) {\n\t\t\t\tif (!objToProxy.has(val))\n\t\t\t\t\tobjToProxy.set(val, createProxy(val, objectHandlers));\n\t\t\t\tinternal = objToProxy.get(val);\n\t\t\t}\n\t\t\tconst result = Reflect.set(target, fullKey, val, receiver);\n\t\t\tif (!signals.has(fullKey)) signals.set(fullKey, signal(internal));\n\t\t\telse signals.get(fullKey).value = internal;\n\t\t\tif (Array.isArray(target) && signals.has(\"length\"))\n\t\t\t\tsignals.get(\"length\").value = target.length;\n\t\t\treturn result;\n\t\t}\n\t},\n\t\t\n\tdefineProperty (target:object, key:string, descriptor:object):boolean {\n\t\tif ((key[0] === \"$\") && (key !== '$')) throwOnMutation();\n\t  \n\t\tconst isNew = ! (key in target)\n\n\t  const signals = proxyToSignals.get(objToProxy.get(target))\n\t\tconst Result:boolean = Reflect.defineProperty(target,key,descriptor)\n\t\t\tif ('value' in descriptor) {\n\t\t\t\tif (signals && signals.has(key)) signals.get(key).value = descriptor.value\n\t\t\t}\n\n\t\t\tif (isNew && objToIterable.has(target)) {\n\t\t\t\tobjToIterable.get(target).value++\n\t\t\t}\n\t\treturn Result\n\t},\n\n\tdeleteProperty(target: object, key: string): boolean {\n\t\tif (key[0] === \"$\") throwOnMutation();\n\t\tconst signals = proxyToSignals.get(objToProxy.get(target));\n\t\tconst result = Reflect.deleteProperty(target, key);\n\t\tif (signals && signals.has(key)) signals.get(key).value = undefined;\n\t\tobjToIterable.has(target) && objToIterable.get(target).value++;\n\t\treturn result;\n\t},\n\t\n\townKeys(target: object): (string | symbol)[] {\n\t\tif (!objToIterable.has(target)) objToIterable.set(target, signal(0));\n\t\tobjToIterable.get(target).value = objToIterable.get(target).value\n\t\treturn Reflect.ownKeys(target);\n\t},\n};\n\nconst arrayHandlers = {\n\tget: get(true),\n\tset: throwOnMutation,\n\tdeleteProperty: throwOnMutation,\n};\n\nconst wellKnownSymbols = new Set(\n\tObject.getOwnPropertyNames(Symbol)\n\t\t.map(key => Symbol[key as WellKnownSymbols])\n\t\t.filter(value => typeof value === \"symbol\")\n);\nconst supported = new Set([Object, Array]);\nconst shouldProxy = (val: any): boolean => {\n\tif (typeof val !== \"object\" || val === null) return false;\n\tconst isBuiltIn =\n\t\ttypeof val.constructor === \"function\" &&\n\t\tval.constructor.name in globalThis &&\n\t\t(globalThis as any)[val.constructor.name] === val.constructor;\n\treturn (!isBuiltIn || supported.has(val.constructor)) && !proxies.has(val);\n};\n\n/** TYPES **/\n\nexport type DeepSignal<T> = T extends Function\n\t? T\n\t: T extends Array<unknown>\n\t? DeepSignalArray<T>\n\t: T extends object\n\t? DeepSignalObject<T>\n\t: T;\n\ntype DeepSignalObject<T extends object> = {\n\t[P in keyof T & string as `$${P}`]?: T[P] extends Function\n\t\t? never\n\t\t: Signal<T[P]>;\n} & {\n\t[P in keyof T]: DeepSignal<T[P]>;\n};\n\n/** @ts-expect-error **/\ninterface DeepArray<T> extends Array<T> {\n\tmap: <U>(\n\t\tcallbackfn: (\n\t\t\tvalue: DeepSignal<T>,\n\t\t\tindex: number,\n\t\t\tarray: DeepSignalArray<T[]>\n\t\t) => U,\n\t\tthisArg?: any\n\t) => U[];\n\tforEach: (\n\t\tcallbackfn: (\n\t\t\tvalue: DeepSignal<T>,\n\t\t\tindex: number,\n\t\t\tarray: DeepSignalArray<T[]>\n\t\t) => void,\n\t\tthisArg?: any\n\t) => void;\n\tconcat(...items: ConcatArray<T>[]): DeepSignalArray<T[]>;\n\tconcat(...items: (T | ConcatArray<T>)[]): DeepSignalArray<T[]>;\n\treverse(): DeepSignalArray<T[]>;\n\tshift(): DeepSignal<T> | undefined;\n\tslice(start?: number, end?: number): DeepSignalArray<T[]>;\n\tsplice(start: number, deleteCount?: number): DeepSignalArray<T[]>;\n\tsplice(\n\t\tstart: number,\n\t\tdeleteCount: number,\n\t\t...items: T[]\n\t): DeepSignalArray<T[]>;\n\tfilter<S extends T>(\n\t\tpredicate: (\n\t\t\tvalue: DeepSignal<T>,\n\t\t\tindex: number,\n\t\t\tarray: DeepSignalArray<T[]>\n\t\t) => value is DeepSignal<S>,\n\t\tthisArg?: any\n\t): DeepSignalArray<S[]>;\n\tfilter(\n\t\tpredicate: (\n\t\t\tvalue: DeepSignal<T>,\n\t\t\tindex: number,\n\t\t\tarray: DeepSignalArray<T[]>\n\t\t) => unknown,\n\t\tthisArg?: any\n\t): DeepSignalArray<T[]>;\n\treduce(\n\t\tcallbackfn: (\n\t\t\tpreviousValue: DeepSignal<T>,\n\t\t\tcurrentValue: DeepSignal<T>,\n\t\t\tcurrentIndex: number,\n\t\t\tarray: DeepSignalArray<T[]>\n\t\t) => T\n\t): DeepSignal<T>;\n\treduce(\n\t\tcallbackfn: (\n\t\t\tpreviousValue: DeepSignal<T>,\n\t\t\tcurrentValue: DeepSignal<T>,\n\t\t\tcurrentIndex: number,\n\t\t\tarray: DeepSignalArray<T[]>\n\t\t) => DeepSignal<T>,\n\t\tinitialValue: T\n\t): DeepSignal<T>;\n\treduce<U>(\n\t\tcallbackfn: (\n\t\t\tpreviousValue: U,\n\t\t\tcurrentValue: DeepSignal<T>,\n\t\t\tcurrentIndex: number,\n\t\t\tarray: DeepSignalArray<T[]>\n\t\t) => U,\n\t\tinitialValue: U\n\t): U;\n\treduceRight(\n\t\tcallbackfn: (\n\t\t\tpreviousValue: DeepSignal<T>,\n\t\t\tcurrentValue: DeepSignal<T>,\n\t\t\tcurrentIndex: number,\n\t\t\tarray: DeepSignalArray<T[]>\n\t\t) => T\n\t): DeepSignal<T>;\n\treduceRight(\n\t\tcallbackfn: (\n\t\t\tpreviousValue: DeepSignal<T>,\n\t\t\tcurrentValue: DeepSignal<T>,\n\t\t\tcurrentIndex: number,\n\t\t\tarray: DeepSignalArray<T[]>\n\t\t) => DeepSignal<T>,\n\t\tinitialValue: T\n\t): DeepSignal<T>;\n\treduceRight<U>(\n\t\tcallbackfn: (\n\t\t\tpreviousValue: U,\n\t\t\tcurrentValue: DeepSignal<T>,\n\t\t\tcurrentIndex: number,\n\t\t\tarray: DeepSignalArray<T[]>\n\t\t) => U,\n\t\tinitialValue: U\n\t): U;\n}\ntype ArrayType<T> = T extends Array<infer I> ? I : T;\ntype DeepSignalArray<T> = DeepArray<ArrayType<T>> & {\n\t[key: number]: DeepSignal<ArrayType<T>>;\n\t$?: { [key: number]: Signal<ArrayType<T>> };\n\t$length?: Signal<number>;\n};\n\nexport declare const useDeepSignal: <T extends object>(obj: T) => DeepSignal<T>;\n\ntype FilterSignals<K> = K extends `$${infer P}` ? never : K;\ntype RevertDeepSignalObject<T> = Pick<T, FilterSignals<keyof T>>;\ntype RevertDeepSignalArray<T> = Omit<T, \"$\" | \"$length\">;\n\nexport type RevertDeepSignal<T> = T extends Array<unknown>\n\t? RevertDeepSignalArray<T>\n\t: T extends object\n\t? RevertDeepSignalObject<T>\n\t: T;\n\ntype WellKnownSymbols =\n\t| \"asyncIterator\"\n\t| \"hasInstance\"\n\t| \"isConcatSpreadable\"\n\t| \"iterator\"\n\t| \"match\"\n\t| \"matchAll\"\n\t| \"replace\"\n\t| \"search\"\n\t| \"species\"\n\t| \"split\"\n\t| \"toPrimitive\"\n\t| \"toStringTag\"\n\t| \"unscopables\";\n","import \"@preact/signals\";\nimport { useMemo } from \"preact/hooks\";\nimport { deepSignal, type DeepSignal } from \"../core/src\";\n\nexport const useDeepSignal = <T extends object>(obj: T): DeepSignal<T> => {\n\treturn useMemo(() => deepSignal(obj), []);\n};\n\nexport * from \"../core/src\";\n"],"names":["proxyToSignals","WeakMap","objToProxy","arrayToArrayOfSignals","proxies","WeakSet","objToIterable","rg","peeking","deepSignal","obj","shouldProxy","Error","has","set","createProxy","objectHandlers","get","peek","key","target","handlers","proxy","Proxy","add","throwOnMutation","isArrayOfSignals","fullKey","receiver","_Object$getOwnPropert","Reflect","returnSignal","Array","isArray","arrayHandlers","Map","signals","replace","Object","getOwnPropertyDescriptor","value","wellKnownSymbols","signal","computed","val","Signal","internal","result","length","defineProperty","descriptor","isNew","Result","deleteProperty","undefined","ownKeys","Set","getOwnPropertyNames","Symbol","map","filter","supported","constructor","name","globalThis","useDeepSignal","useMemo"],"mappings":"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"}