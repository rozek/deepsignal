{"version":3,"file":"deepsignal-react.mjs","sources":["../../core/src/index.ts","../src/index.ts"],"sourcesContent":["import { batch, computed, signal, Signal } from \"@preact/signals-core\";\n\nconst proxyToSignals = new WeakMap();\nconst objToProxy = new WeakMap();\nconst arrayToArrayOfSignals = new WeakMap();\nconst ignore = new WeakSet();\nconst objToIterable = new WeakMap();\nconst rg = /^\\$/;\nlet peeking = false;\n\nexport const deepSignal = <T extends object>(obj: T): DeepSignal<T> => {\n\tif (!shouldProxy(obj)) throw new Error(\"This object can't be observed.\");\n\tif (!objToProxy.has(obj))\n\t\tobjToProxy.set(obj, createProxy(obj, objectHandlers) as DeepSignal<T>);\n\treturn objToProxy.get(obj);\n};\n\nexport const peek = <\n\tT extends DeepSignalObject<object>,\n\tK extends keyof RevertDeepSignalObject<T>\n>(\n\tobj: T,\n\tkey: K\n): RevertDeepSignal<RevertDeepSignalObject<T>[K]> => {\n\tpeeking = true;\n\tconst value = obj[key];\n\ttry {\n\t\tpeeking = false;\n\t} catch (e) {}\n\treturn value as RevertDeepSignal<RevertDeepSignalObject<T>[K]>;\n};\n\nexport function shallow<T extends object>(obj: T): T;\n\nexport function shallow<\n\tT extends DeepSignalObject<object>,\n\tK extends keyof RevertDeepSignalObject<T>\n>(obj: T, key: K): RevertDeepSignal<RevertDeepSignalObject<T>[K]>;\n\nexport function shallow(obj: any, key?: any): any {\n\tconst o = key ? peek(obj, key) : obj;\n\tignore.add(o);\n\treturn o;\n}\n\nconst createProxy = (target: object, handlers: ProxyHandler<object>) => {\n\tconst proxy = new Proxy(target, handlers);\n\tignore.add(proxy);\n\treturn proxy;\n};\n\nconst throwOnMutation = () => {\n\tthrow new Error(\"Don't mutate the signals directly.\");\n};\n\nconst get = (isArrayOfSignals: boolean) =>\n\t(target: object, fullKey: string, receiver: object): unknown => {\n\t\tif (peeking) return Reflect.get(target, fullKey, receiver);\n\t\tlet returnSignal = isArrayOfSignals || (fullKey[0] === \"$\") && (fullKey !== '$');\n\t\tif (!isArrayOfSignals && returnSignal && Array.isArray(target)) {\n\t\t\tif (fullKey === \"$\") {\n\t\t\t\tif (!arrayToArrayOfSignals.has(target))\n\t\t\t\t\tarrayToArrayOfSignals.set(target, createProxy(target, arrayHandlers));\n\t\t\t\treturn arrayToArrayOfSignals.get(target);\n\t\t\t}\n\t\t\treturnSignal = fullKey === \"$length\";\n\t\t}\n\n\t\tif (!proxyToSignals.has(receiver)) proxyToSignals.set(receiver, new Map());\n\n\t\tconst signals = proxyToSignals.get(receiver);\n\t\tconst key = returnSignal ? fullKey.replace(rg, \"\") : fullKey;\n\t\tif (\n\t\t\t!signals.has(key) &&\n\t\t\ttypeof Object.getOwnPropertyDescriptor(target, key)?.get === \"function\"\n\t\t) {\n\t\t\tsignals.set(\n\t\t\t\tkey,\n\t\t\t\tcomputed(() => Reflect.get(target, key, receiver))\n\t\t\t);\n\t\t} else {\n\t\t\tlet value = Reflect.get(target, key, receiver);\n\t\t\tif (returnSignal && typeof value === \"function\") return;\n\t\t\tif (typeof key === \"symbol\" && wellKnownSymbols.has(key)) return value;\n\t\t\t// TODO: doesn't \"typeof key\" always yield \"string\"?\n\n\t\t\tif (!signals.has(key)) {\n\t\t\t\tif (shouldProxy(value)) {\n\t\t\t\t\tif (!objToProxy.has(value))\n\t\t\t\t\t\tobjToProxy.set(value, createProxy(value, objectHandlers));\n\t\t\t\t\tvalue = objToProxy.get(value);\n\t\t\t\t}\n\t\t\t\tsignals.set(key, signal(value));\n\t\t\t}\n\t\t\tif (! returnSignal) { signals.get(key).value = value }\n\t\t}\n\t\treturn returnSignal ? signals.get(key) : signals.get(key).value;\n\t};\n\nconst objectHandlers = {\n\tget: get(false),\n\n\tset(target: object, fullKey: string, val: any, receiver: object): boolean {\n\t\tif (!proxyToSignals.has(receiver)) proxyToSignals.set(receiver, new Map());\n\t\tconst signals = proxyToSignals.get(receiver);\n\t\tif ((fullKey[0] === \"$\") && (fullKey !== '$')) {\n\t\t\tif (!(val instanceof Signal)) throwOnMutation();\n\t\t\tconst key = fullKey.replace(rg, \"\");\n\t\t\tsignals.set(key, val);\n\t\t\treturn Reflect.set(target, key, val.peek(), receiver);\n\t\t} else {\n\t\t\tlet internal = val;\n\t\t\tif (shouldProxy(val)) {\n\t\t\t\tif (!objToProxy.has(val))\n\t\t\t\t\tobjToProxy.set(val, createProxy(val, objectHandlers));\n\t\t\t\tinternal = objToProxy.get(val);\n\t\t\t}\n\t\t\tconst result = Reflect.set(target, fullKey, val, receiver);\n\t\t\tif (!signals.has(fullKey)) signals.set(fullKey, signal(internal));\n\t\t\telse signals.get(fullKey).value = internal;\n\t\t\tif (Array.isArray(target) && signals.has(\"length\"))\n\t\t\t\tsignals.get(\"length\").value = target.length;\n\t\t\treturn result;\n\t\t}\n\t},\n\n\tdefineProperty (target:object, key:string, descriptor:object):boolean {\n\t\tif ((key[0] === \"$\") && (key !== '$')) throwOnMutation();\n\t\tconst isNew = ! (key in target)\n\n\t  const signals = proxyToSignals.get(objToProxy.get(target))\n\t\tconst Result:boolean = Reflect.defineProperty(target,key,descriptor)\n\t\t\tif ('value' in descriptor) {\n\t\t\t\tif (signals && signals.has(key)) signals.get(key).value = descriptor.value\n\t\t\t}\n\n\t\t\tif (isNew && objToIterable.has(target)) {\n\t\t\t\tobjToIterable.get(target).value++\n\t\t\t}\n\t\treturn Result\n\t},\n\n\tdeleteProperty(target: object, key: string): boolean {\n\t\tif ((key[0] === \"$\") && (key !== '$')) throwOnMutation();\n\t\tconst signals = proxyToSignals.get(objToProxy.get(target));\n\t\tconst result = Reflect.deleteProperty(target, key);\n\t\tif (signals && signals.has(key)) signals.get(key).value = undefined;\n\t\tobjToIterable.has(target) && objToIterable.get(target).value++;\n\t\treturn result;\n\t},\n\n\townKeys(target: object): (string | symbol)[] {\n\t\tif (!objToIterable.has(target)) objToIterable.set(target, signal(0));\n\t\t(objToIterable as any)._ = objToIterable.get(target).value;\n\t\treturn Reflect.ownKeys(target);\n\t},\n};\n\nconst arrayHandlers = {\n\tget: get(true),\n\tset: throwOnMutation,\n\tdeleteProperty: throwOnMutation,\n};\n\nconst wellKnownSymbols = new Set(\n\tObject.getOwnPropertyNames(Symbol)\n\t\t.map(key => Symbol[key as WellKnownSymbols])\n\t\t.filter(value => typeof value === \"symbol\")\n);\nconst supported = new Set([Object, Array]);\nconst shouldProxy = (val: any): boolean => {\n\tif (typeof val !== \"object\" || val === null) return false;\n\tconst isBuiltIn =\n\t\ttypeof val.constructor === \"function\" &&\n\t\tval.constructor.name in globalThis &&\n\t\t(globalThis as any)[val.constructor.name] === val.constructor;\n\treturn (!isBuiltIn || supported.has(val.constructor)) && !ignore.has(val);\n};\n\n/**** additional support for some Array methods ****/\n\n\texport function ValueIsDeeplyObserved (Value:any):boolean {\n\t  return objToProxy.has(Value)\n\t}\n\n/**** SignalSavvy ****/\n\n  function SignalSavvy (ArrayMethod:Function):Function {\n  \treturn function (this:any[], ...Arguments:any[]):any {\n\t    if (ValueIsDeeplyObserved(this)) {\n\t      let Result\n\t        batch(() => { Result = ArrayMethod.call(this,...Arguments) })\n\t      return Result\n\t    } else {\n\t      return ArrayMethod.call(this,...Arguments)\n\t    }\n  \t}\n  }\n  \n  ;[                                     // 'push' works properly out-of-the-box\n    'copyWithin','fill','pop','reverse','shift','sort','splice','unshift'\n  ].forEach((MethodName:string) => {\n// @ts-ignore TS7015 just assume proper typing for built-in array methods\n  \tArray.prototype[MethodName] = SignalSavvy(Array.prototype[MethodName])\n  })\n\n/** TYPES **/\n\nexport type DeepSignal<T> = T extends Function\n\t? T\n\t: T extends Array<unknown>\n\t? DeepSignalArray<T>\n\t: T extends object\n\t? DeepSignalObject<T>\n\t: T;\n\ntype DeepSignalObject<T extends object> = {\n\t[P in keyof T & string as `$${P}`]?: T[P] extends Function\n\t\t? never\n\t\t: Signal<T[P]>;\n} & {\n\t[P in keyof T]: DeepSignal<T[P]>;\n};\n\n/** @ts-expect-error **/\ninterface DeepArray<T> extends Array<T> {\n\tmap: <U>(\n\t\tcallbackfn: (\n\t\t\tvalue: DeepSignal<T>,\n\t\t\tindex: number,\n\t\t\tarray: DeepSignalArray<T[]>\n\t\t) => U,\n\t\tthisArg?: any\n\t) => U[];\n\tforEach: (\n\t\tcallbackfn: (\n\t\t\tvalue: DeepSignal<T>,\n\t\t\tindex: number,\n\t\t\tarray: DeepSignalArray<T[]>\n\t\t) => void,\n\t\tthisArg?: any\n\t) => void;\n\tconcat(...items: ConcatArray<T>[]): DeepSignalArray<T[]>;\n\tconcat(...items: (T | ConcatArray<T>)[]): DeepSignalArray<T[]>;\n\treverse(): DeepSignalArray<T[]>;\n\tshift(): DeepSignal<T> | undefined;\n\tslice(start?: number, end?: number): DeepSignalArray<T[]>;\n\tsplice(start: number, deleteCount?: number): DeepSignalArray<T[]>;\n\tsplice(\n\t\tstart: number,\n\t\tdeleteCount: number,\n\t\t...items: T[]\n\t): DeepSignalArray<T[]>;\n\tfilter<S extends T>(\n\t\tpredicate: (\n\t\t\tvalue: DeepSignal<T>,\n\t\t\tindex: number,\n\t\t\tarray: DeepSignalArray<T[]>\n\t\t) => value is DeepSignal<S>,\n\t\tthisArg?: any\n\t): DeepSignalArray<S[]>;\n\tfilter(\n\t\tpredicate: (\n\t\t\tvalue: DeepSignal<T>,\n\t\t\tindex: number,\n\t\t\tarray: DeepSignalArray<T[]>\n\t\t) => unknown,\n\t\tthisArg?: any\n\t): DeepSignalArray<T[]>;\n\treduce(\n\t\tcallbackfn: (\n\t\t\tpreviousValue: DeepSignal<T>,\n\t\t\tcurrentValue: DeepSignal<T>,\n\t\t\tcurrentIndex: number,\n\t\t\tarray: DeepSignalArray<T[]>\n\t\t) => T\n\t): DeepSignal<T>;\n\treduce(\n\t\tcallbackfn: (\n\t\t\tpreviousValue: DeepSignal<T>,\n\t\t\tcurrentValue: DeepSignal<T>,\n\t\t\tcurrentIndex: number,\n\t\t\tarray: DeepSignalArray<T[]>\n\t\t) => DeepSignal<T>,\n\t\tinitialValue: T\n\t): DeepSignal<T>;\n\treduce<U>(\n\t\tcallbackfn: (\n\t\t\tpreviousValue: U,\n\t\t\tcurrentValue: DeepSignal<T>,\n\t\t\tcurrentIndex: number,\n\t\t\tarray: DeepSignalArray<T[]>\n\t\t) => U,\n\t\tinitialValue: U\n\t): U;\n\treduceRight(\n\t\tcallbackfn: (\n\t\t\tpreviousValue: DeepSignal<T>,\n\t\t\tcurrentValue: DeepSignal<T>,\n\t\t\tcurrentIndex: number,\n\t\t\tarray: DeepSignalArray<T[]>\n\t\t) => T\n\t): DeepSignal<T>;\n\treduceRight(\n\t\tcallbackfn: (\n\t\t\tpreviousValue: DeepSignal<T>,\n\t\t\tcurrentValue: DeepSignal<T>,\n\t\t\tcurrentIndex: number,\n\t\t\tarray: DeepSignalArray<T[]>\n\t\t) => DeepSignal<T>,\n\t\tinitialValue: T\n\t): DeepSignal<T>;\n\treduceRight<U>(\n\t\tcallbackfn: (\n\t\t\tpreviousValue: U,\n\t\t\tcurrentValue: DeepSignal<T>,\n\t\t\tcurrentIndex: number,\n\t\t\tarray: DeepSignalArray<T[]>\n\t\t) => U,\n\t\tinitialValue: U\n\t): U;\n}\ntype ArrayType<T> = T extends Array<infer I> ? I : T;\ntype DeepSignalArray<T> = DeepArray<ArrayType<T>> & {\n\t[key: number]: DeepSignal<ArrayType<T>>;\n\t$?: { [key: number]: Signal<ArrayType<T>> };\n\t$length?: Signal<number>;\n};\n\nexport declare const useDeepSignal: <T extends object>(obj: T) => DeepSignal<T>;\n\ntype FilterSignals<K> = K extends `$${infer P}` ? never : K;\ntype RevertDeepSignalObject<T> = Pick<T, FilterSignals<keyof T>>;\ntype RevertDeepSignalArray<T> = Omit<T, \"$\" | \"$length\">;\n\nexport type RevertDeepSignal<T> = T extends Array<unknown>\n\t? RevertDeepSignalArray<T>\n\t: T extends object\n\t? RevertDeepSignalObject<T>\n\t: T;\n\ntype WellKnownSymbols =\n\t| \"asyncIterator\"\n\t| \"hasInstance\"\n\t| \"isConcatSpreadable\"\n\t| \"iterator\"\n\t| \"match\"\n\t| \"matchAll\"\n\t| \"replace\"\n\t| \"search\"\n\t| \"species\"\n\t| \"split\"\n\t| \"toPrimitive\"\n\t| \"toStringTag\"\n\t| \"unscopables\";\n","import \"@preact/signals-react\";\nimport { useMemo } from \"react\";\nimport { deepSignal, type DeepSignal } from \"../../core/src\";\n\nexport const useDeepSignal = <T extends object>(obj: T): DeepSignal<T> => {\n\treturn useMemo(() => deepSignal(obj), []);\n};\n\nexport * from \"../../core/src\";\n"],"names":["proxyToSignals","WeakMap","objToProxy","arrayToArrayOfSignals","ignore","WeakSet","objToIterable","rg","peeking","deepSignal","obj","shouldProxy","Error","has","set","createProxy","objectHandlers","get","peek","key","value","e","shallow","o","add","target","handlers","proxy","Proxy","throwOnMutation","isArrayOfSignals","fullKey","receiver","_Object$getOwnPropert","Reflect","returnSignal","Array","isArray","arrayHandlers","Map","signals","replace","Object","getOwnPropertyDescriptor","wellKnownSymbols","signal","computed","val","Signal","internal","result","length","defineProperty","descriptor","isNew","Result","deleteProperty","undefined","ownKeys","_","Set","getOwnPropertyNames","Symbol","map","filter","supported","constructor","name","globalThis","ValueIsDeeplyObserved","Value","forEach","MethodName","ArrayMethod","prototype","Arguments","this","batch","call","useDeepSignal","useMemo"],"mappings":"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"}